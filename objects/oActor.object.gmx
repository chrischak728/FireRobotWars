<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>army = BLUE_ARMY;

state = "idle";
gridX = 0;
gridY = 0;

name = "Error";

class = "Peasant";
race = "Human";


//char stats -----------------------------------------
level = 1;

//base stats
profMod = 2 + floor(level/5);

//strength
strMod = 0;
//speed
dexMod = 0;
//constitution
conMod = 0;
//institution
intMod = 0;
//wisdom
wisMod = 0;

//health variable
maxHP = 4 + conMod + ((level-1) * (3+conMod));
currentHP = maxHP;

//attack variable
hitBonus = profMod + strMod;
attackType = "melee";
attackTarget = noone;

actionTimer = 0;

//damage variable
damageDice = 4;
damageBonus = strMod;
damageType = "piercing";

//defense variable
armorClass = 10 + dexMod;

//move and action variable
move = 6;
actions = 2;
canAct = false;

//special action
charge = false;
sneakAttack = false;

//spell and action
spellHitBonus = 0;
spellSaveDC = 0;

firstLevelSlotMax = 0;
firstLevelSlot = 0;

readiedAction = "error";
targetingType = "error";
actionRange = 0;

//init stats
initiative = dexMod;
initRoll = 0;

//button
defaultActions = ds_list_create();
ds_list_add(defaultActions, "end turn");

//pathing ------------------------------
movementPath = path_add();
path_set_kind(movementPath, 2);
path_set_closed(movementPath, false);

endPath = "idle";

//animation
moveSpeed = 8;

//buff
blessed = 0;

//debuff
acidBurn = 0;
guidingBolt = false;

//special effect
shake = 0;
shakeMag = 0;

//sprite index
spIdle = char1;
spTop = char1_top;
spLeft = char1_left;
spDown = char1_down;
spRight = char1_right;
image_speed = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake -= 1;

switch (state){
    case "initialize turn":
        //handle buff and debuff
        if(blessed &gt; oGame.roundCounter){
            with(instance_create(x, y, oBless)){
                target = other;
            }
        } else {
            blessed = 0;
        }
        
        if(acidBurn &gt; 0){
            damage = irandom_range(1, 4);
            
            with(instance_create(x+18, y+2, oDamageText)){
                text = "-" + string(other.damage);
                ground = y;
            }
            
            currentHP -= damage;
            acidBurn--;
        }
        
        if(army==BLUE_ARMY){ //allies
            movement_range(map[gridX,gridY], move, actions);
            
            switch(attackType){
                case "melee":
                    melee_attack_range(id);
                    break;
                case "ranged":
                    ranged_attack_range(id);
                    break;
            }
            
            oCursor.selectedActor = id;
            state = "ready";
            
        } else { //enemies
            //state = "ready";
            AI_think(map[gridX,gridY], move, actions,true,id)
            //flash = true;
            //alarm[0] = 90;
            
        }
        
        //state = "ready";
        break;
    case "begin path": 
        //begin move
        path_start(movementPath, moveSpeed, 0, true);
        state = "moving";
        //Walk Sound FX
        if (!global.muted){
            var sfx_walk = audio_play_sound(sn_walk,10,true);
            audio_sound_gain(sfx_walk,random_range(1.5,1),0);
            audio_sound_pitch(sfx_walk,random_range(0.95,1));
        }
        break;
    case "begin attack":
        actionTimer--;
        if(actionTimer&lt;=0){
            state = "attack";
        }
        //Attack Sound FX
        if (!global.muted){
            audio_play_sound(sn_shot,10,false);
        }
        break;
    case "attack":
        attackRoll = irandom_range(1, 20);
        
        applySneakAttack = false;
        
        if(sneakAttack){
            tempNode = map[attackTarget.gridX, attackTarget.gridY];
            
            for(ii=0;ii&lt;ds_list_size(tempNode.neighbors);ii++){
                current = ds_list_find_value(tempNode.neighbors, ii);
                
                if(current.occupant!=noone &amp;&amp; current.occupant.army!=tempNode.occupant.army){
                    applySneakAttack = true;
                }
            }
        }
            
        attackStatus = attack_roll(id, attackTarget);
        
        tempDamage = 0;
        
        //make damage roll
        if(attackStatus!="miss"){
            tempDamage = irandom_range(1, damageDice) + damageBonus;
            
            if(applySneakAttack){
                tempDamage += irandom_range(1, sneakAttackDamage);
            }
            
            if(attackStatus=="crit"){
                tempDamage += irandom_range(1, damageDice);
                if(applySneakAttack){
                    tempDamage += irandom_range(1, sneakAttackDamage);
                }
            }
        }
        switch(attackType){            
            case "ranged":                
                attackDir = point_direction(x+16, y+16, attackTarget.x+16, attackTarget.y+16);
                
                beginX = x + 16 + lengthdir_x(30, attackDir);
                beginY = y + 16 + lengthdir_y(30, attackDir);                
                
                with(instance_create(beginX, beginY, oArrow)){
                    target = other.attackTarget;
                    status = other.attackStatus;
                    damage = other.tempDamage;
                    damageType = other.damageType;
                    
                    path_add_point(movementPath, other.beginX, other.beginY, 100);
                    
                    if(status!="miss"){
                        path_add_point(movementPath, target.x+16, target.y+16, 100);
                    } else {
                        path_add_point(movementPath, target.x + (irandom_range(30, 50)*(choose(-1,1))), target.y + (irandom_range(30, 50)*(choose(-1,1))), 100);
                    }
                    
                    path_start(movementPath, speed, true, true);
                }
                
                state = "end attack";
                
                actionTimer = 30;
                
                
                
                break;
                
            case "melee":
                if(attackStatus!="miss"){
                    for(ii=0;ii&lt;6;ii++){
                        with(instance_create(attackTarget.x+16, attackTarget.y+16, oBiff)){
                            direction = irandom(360);
                            speed = choose(2,4);
                            scale = choose(2,3);
                            
                            image_speed = 0.5;
                            
                            if(other.attackStatus == "crit"){
                                color = c_yellow;
                            }
                        }
                    }
                    
                    if(attackStatus == "crit"){
                        attackTarget.shake = 8;
                        attackTarget.shakeMag = 8;
                    } else {
                        attackTarget.shake = 4;
                        attackTarget.shakeMag = 4;
                    }
                    
                    attackTarget.currentHP -= tempDamage;
                    if(attackTarget.currentHP&lt;=0){
                        attackTarget.state = "dead";
                    }
                    
                    with(instance_create(attackTarget.x+28, attackTarget.y+2, oDamageText)){
                        text = "-" + string(other.tempDamage);
                        
                        ground = y;
                        
                        if(other.attackStatus == "crit"){
                            font = fCrit;
                        }
                    }
                } else {
                    with(instance_create(attackTarget.x+28, attackTarget.y+2, oDamageText)){
                        text = "miss";
                        
                        ground = y;
                    }
                
                
                }
                
                state = "end attack";
                
                attackTime = 10;
                
                break;
        }
        break;
    case "end attack":
            actionTimer -= 1;
            if(actionTimer&lt;=0){
                if(actions&gt;0){
                    oCursor.selectedActor = id;
                    
                    movement_range(map[gridX, gridY], move, actions)
                } else {
                    oGame.currentActor = noone;
                }
                
                state = "idle";
            }
        break;
    case "begin action":
        wipe_nodes();
        action_targeting(id, targetingType, actionRange);
        
        break;
        
    case "perform action":
        perform_action(id, readiedAction);
        wipe_nodes();
        break;
        
    case "end action":
        actionTimer -=1;
        if(actionTimer &lt;=0 ){
            state = "idle";
            
            if(actions&gt;0){
                movement_range(map[gridX, gridY], move, actions);
            } else {
                state = "idle";
                oCursor.selectedActor = noone;
                oGame.currentActor = noone;
            }
        }
        break;
        
    case "end turn":
        actionTimer -=1;
        if(actionTimer &lt;=0){
            oCursor.selectedActor = noone;
            oGame.currentActor = noone;
            state = "idle";
        }
        break;
        
    case "dead":
        //Death Sound FX
        if (!global.muted){
            audio_play_sound(sn_death,10,false);
        }
        //remove occupant from currentNode
        oTargetStats.actor = noone;    
        map[gridX, gridY].occupant = noone;
        //remove from roll list from oGame
        index = ds_list_find_index(oGame.turnOrder, id);
        ds_list_delete(oGame.turnOrder, index);
        
        //destroy instance from game
        instance_destroy();
        
        oGame.turnMax--;
        
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//clear path
path_clear_points(movementPath);

if(endPath=="ready"){
    state = "idle";
    audio_stop_sound(sn_walk);

    //remaining moves:
    if (actions&gt;0){
        oCursor.selectedActor = id;
        movement_range(map[gridX, gridY], move, actions);
        
        if(canAct){
            switch(attackType){
                case "ranged":
                    ranged_attack_range(id);
                    break;
                case "melee":
                    melee_attack_range(id);
                    break;
            }
        }
    } else {
        oGame.currentActor = noone;
    }

} else {
    state = endPath;
    audio_stop_sound(sn_walk);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(oCursor.selectedActor == id &amp;&amp; oCursor.hoverNode!=noone){
    tempNode = oCursor.hoverNode;
    if (tempNode.moveNode){
        current = oCursor.hoverNode;
        
        //scan parent hirachy
        while (current.parent != noone){
            //draw line
            draw_line_width_color(current.x +16, current.y +16, current.parent.x +16, current.parent.y + 16, 4, c_lime, c_lime);
            current = current.parent;
    
        }
    }
    
    if(tempNode.attackNode){
        switch(attackType){
            case "ranged":
                draw_line_width_colour(x+16, y+16, tempNode.x+16, tempNode.y+16, 4, c_purple, c_purple);
                break;
            
            case "melee":
                tempX = abs(tempNode.gridX - gridX);
                tempY = abs(tempNode.gridY - gridY);
                
                if(tempX&lt;=1 &amp;&amp; tempY&lt;=1){
                    draw_line_width_colour(x+16, y+16, tempNode.x+16, tempNode.y+16, 4, c_purple, c_purple);
                } else {
                    current = noone;
                    tempG = 100;
                    
                    for(ii=0; ii&lt;ds_list_size(tempNode.neighbors);ii++){
                        neighbor = ds_list_find_value(tempNode.neighbors, ii);
                        
                        if(neighbor.occupant==noone &amp;&amp; neighbor.G &gt;0 &amp;&amp; neighbor.G&lt;tempG){
                            tempG = neighbor.G;
                            current = neighbor;
                        }
                    }
                    
                    draw_line_width_colour(tempNode.x+16, tempNode.y+16, current.x+16, current.y+16, 4, c_purple, c_purple);
                    
                    while(current.parent!=noone){
                        draw_line_width_colour(current.x+16, current.y+16, current.parent.x+16, current.parent.y+16, 4, c_purple, c_purple);
                        current = current.parent;
                    }
                }
                break;
        }
    }
}

if(shake&gt;0){
    draw_sprite_ext(sprite_index, -1, x+irandom_range(-shakeMag,shakeMag), y+irandom_range(-shakeMag, shakeMag), 1, 1, 0, c_white, 1)
} else {
    if(state="moving"){
        if (direction &gt;= 315 || direction &lt;= 45){
            sprite_index = spRight;
        } else if (direction &gt; 45 &amp;&amp; direction &lt; 135){
            sprite_index = spTop;
        } else if (direction &gt;=135 &amp;&amp; direction &lt;= 225){
           sprite_index = spLeft;
        } else if (direction &gt;225 &amp;&amp; direction &lt; 315){
            sprite_index = spDown;
        }
    } else {
        sprite_index = spIdle;
    }
    draw_self(); 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
