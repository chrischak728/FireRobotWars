<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>army = BLUE_ARMY;

state = "idle";
gridX = 0;
gridY = 0;

name = "Error";

class = "Peasant";
race = "Human";

//char stats -----------------------------------------
level = 1;

//base stats
profMod = 2 + floor(level/5);

//strength
strMod = 0;
//speed
dexMod = 0;
//constitution
conMod = 0;
//institution
intMod = 0;
//wisdom
wisMod = 0;

//health variable
maxHP = 4 + conMod + ((level-1) * (3+conMod));
currentHP = maxHP;

//attack variable
hitBonus = profMod + strMod;
attackType = "melee";
attackTarget = noone;
attackTimer = 0;

//damage variable
damageDice = 4;
damageBonus = strMod;
damageType = "piercing";

//defense variable
armorClass = 10 + dexMod;

//move and action variable
move = 6;
actions = 2;
canAct = false;

//init stats
initiative = dexMod;
initRoll = 0;

//pathing ------------------------------
movementPath = path_add();
path_set_kind(movementPath, 2);
path_set_closed(movementPath, false);

//animation
moveSpeed = 8;

//effect
shake = 0;
shakeMag = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake -= 1;

switch (state){
    case "begin path": 
        //begin move
        path_start(movementPath, moveSpeed, 0, true);
        state = "moving";
        break;
    case "begin attack":
        attackTimer--;
        if(attackTimer&lt;=0){
            state = "attack";
        }
        break;
    case "attack":
        switch(attackType){
            case "ranged":
                attackRoll = irandom_range(1, 20);
                
                if(attackRoll == 20){
                    attackStatus = "crit";
                } else {
                    if(attackRoll + hitBonus &gt;  attackTarget.armorClass){
                        attackStatus = "hit";
                    } else {
                        attackStatus = "miss";
                    }
                }
                
                tempDamage = 10;
                if(attackStatus!="miss"){
                    tempDamage = irandom_range(1, damageDice) + damageBonus;
                    
                    if(attackStatus=="crit"){
                        tempDamage += irandom_range(1, damageDice);
                    }
                }
                
                attackDir = point_direction(x+16, y+16, attackTarget.x+16, attackTarget.y+16);
                
                beginX = x + 16 + lengthdir_x(30, attackDir);
                beginY = y + 16 + lengthdir_y(30, attackDir);                
                
                with(instance_create(beginX, beginY, oArrow)){
                    target = other.attackTarget;
                    status = other.attackStatus;
                    damage = other.tempDamage;
                    damageType = other.damageType;
                    
                    path_add_point(movementPath, other.beginX, other.beginY, 100);
                    
                    if(status!="miss"){
                        path_add_point(movementPath, target.x+16, target.y+16, 100);
                    } else {
                        path_add_point(movementPath, target.x + (irandom_range(30, 50)*(choose(-1,1))), target.y + (irandom_range(30, 50)*(choose(-1,1))), 100);
                    }
                    
                    path_start(movementPath, speed, true, true);
                }
                
                state = "end attack";
                break;
        }
        break;
    case "end attack":
            attackTimer -= 1;
            if(attackTimer&lt;=0){
                if(actions&gt;0){
                    oCursor.selectedActor = id;
                    
                    movement_range(map[gridX, gridY], move, actions)
                } else {
                    oGame.currentActor = noone;
                }
                
                state = "idle";
            }
        break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//clear path
path_clear_points(movementPath);

state = "idle";

//remaining moves:
if (actions&gt;0){
    oCursor.selectedActor = id;
    movement_range(map[gridX, gridY], move, actions);
    
    if(canAct){
        switch(attackType){
            case "ranged":
                ranged_attack_range(id);
                break;
        }
    }
} else {
    oGame.currentActor = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(oCursor.selectedActor == id){
    tempNode = oCursor.hoverNode;
    if (tempNode.moveNode){
        current = oCursor.hoverNode;
        
        //scan parent hirachy
        while (current.parent != noone){
            //draw line
            draw_line_width_color(current.x +16, current.y +16, current.parent.x +16, current.parent.y + 16, 4, c_lime, c_lime);
            current = current.parent;
    
        }
    }
    
    if(tempNode.attackNode){
        switch(attackType){
            case "ranged":
                draw_line_width_colour(x+16, y+16, tempNode.x+16, tempNode.y+16, 4, c_purple, c_purple);
                break;
        }
    }
}

if(shake&gt;0){
    draw_sprite_ext(sprite_index, -1, x+irandom_range(-shakeMag,shakeMag), y+irandom_range(-shakeMag, shakeMag), 1, 1, 0, c_white, 1)
} else {
    draw_self();    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
