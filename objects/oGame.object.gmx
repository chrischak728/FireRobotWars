<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fDefault);

randomize();

state = "initializing";

turnOrder = ds_list_create();

turnCounter = -1;

turnMax = 0;

currentActor = noone;

roundCounter = 0;

globalvar map;

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;

//create node objs on map
for (i =0;i&lt;mapWidth;i++){
    for (j=0; j&lt;mapHeight;j++){
        map[i,j] = instance_create(i*GRID_SIZE, j*GRID_SIZE, oNode);
        map[i,j].gridX = i;
        map[i,j].gridY = j;
    }
}

//define neighbors of nodes
for (i =0;i&lt;mapWidth;i++){
    for (j=0; j&lt;mapHeight;j++){
        node = map[i,j]; 
        
        //left neighbor
        if (i&gt;0)
            ds_list_add(node.neighbors, map[i-1,j]);
        
        //right neighbor
        if (i&lt; mapWidth -1)
            ds_list_add(node.neighbors, map[i+1,j]);
        
        //top neighbor
        if (j&gt;0)
            ds_list_add(node.neighbors, map[i,j-1]);
        
        //buttom neighbor
        if (j&lt;mapHeight -1)
            ds_list_add(node.neighbors, map[i,j+1]);
        
        //top-left neighbor
        if (i&gt;0 &amp;&amp; j &gt;0)
            ds_list_add(node.neighbors, map[i-1,j-1]);
    
        //top-right neighbor
        if (i&lt;mapWidth-1 &amp;&amp; j&gt;0 )
            ds_list_add(node.neighbors, map[i+1,j-1]);
    
        //bottom-left neighbor
        if (i&gt;0 &amp;&amp; j &lt; mapHeight-1)
            ds_list_add(node.neighbors, map[i-1,j+1]);
    
        //bottom-right neighbor
       if (i&lt;mapWidth-1 &amp;&amp; j &lt;mapHeight-1)
            ds_list_add(node.neighbors, map[i+1,j+1]);
    }
}

instance_create(0, 0,oCursor); 
instance_create(0, 0, oSelfStats);
instance_create(room_width, 0, oTargetStats);

//Game Sound FX BGM

//var sfx_bgm = audio_play_sound(sn_bgm,20,true);

if(!global.muted) //If it's not muted
{
  audio_play_sound(sn_bgm,20,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state){
    case "initializing":
        with(oNode){
            if (instance_position (x+16, y+16, oTerrain)){
                tempTerrain = instance_position(x+16, y+16, oTerrain);
                
                switch(tempTerrain.type){
                    case "wall":
                        instance_change(oWall, true);
                        type = "wall";
                        passable = false;
                        break;
                        
                    case "rubble":
                        instance_change(oRubble, true);
                        type = "rubble";
                        cost = 2;
                        break;
                }
                with(tempTerrain){
                    instance_destroy();
                }
            }
            
            if (instance_position (x+16, y+16,oActor)){
                occupant = instance_position (x+16, y+16, oActor);
                occupant.gridX = gridX;
                occupant.gridY = gridY;
            }
        }
        
        state = "roll init";
        break;
    
    case "roll init":
        tempInit = ds_priority_create();
        
        //add all actor in the queue
        with(oActor){
            initRoll = irandom(20) + initiative;
            
            ds_priority_add(other.tempInit, id, initRoll);
        }
        
        while(ds_priority_size(tempInit)&gt;0){
            ds_list_add(turnOrder, ds_priority_delete_max(tempInit));
        }
        
        turnMax = ds_list_size(turnOrder);
        
        ds_priority_destroy(tempInit);
        
        state = "ready";
        
        break;
        
    case "ready":
        if(currentActor == noone){
            if(check_game_over()!=false){
                state = "end";    
            } else {
        
                turnCounter++;
            
                if(turnCounter &gt;= turnMax){
                    turnCounter = 0;
                    roundCounter++;
                }
                
                show_debug_message("turnCounter: "+string(turnCounter)+"/ turnMax: "+string(turnMax)+"/ list_size"+string(ds_list_size(turnOrder)));
                
                currentActor = ds_list_find_value(turnOrder, turnCounter);
                
                currentActor.actions = 2;
                currentActor.canAct = true;
                
                currentActor.state = "initialize turn";
            
            }
        }    
    
        break;
        
    case "end":
        //show game over message
        if(check_game_over()==GAME_LOSE){
            win = false;

        } else if(check_game_over()==GAME_WIN){
            win = true;
            audio_stop_all();
            audio_play_sound(sn_win,1,true);
        }
        with(instance_create(room_width/2, room_height, oGameOverMessage)){
            win = other.win;
        }
        break;
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.muted) //If it's not muted
{
  global.muted=1;
  sound_global_volume(0);
  audio_stop_all();
}
else
{
  global.muted=0;
  sound_global_volume(1);
  audio_play_sound(sn_bgm,1,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
